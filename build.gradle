import java.nio.file.Paths

import static org.codehaus.groovy.runtime.IOGroovyMethods.withCloseable

buildscript {
	repositories {
		mavenCentral()
//        For node plugin
        maven {
            url "https://plugins.gradle.org/m2/"
        }
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("com.moowork.gradle:gradle-node-plugin:${nodePluginVersion}")
        // Has problems with java 8, need to wait for update
//		classpath 'org.springframework:springloaded:1.2.6.RELEASE'
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'war'
apply plugin: 'com.moowork.node'

sourceCompatibility = 1.8

repositories {
	mavenCentral()
}

dependencies {
	/** Disables caches and some other properties for development */
	compile "org.springframework.boot:spring-boot-devtools:${springBootVersion}"

	compile("org.springframework.boot:spring-boot-starter-cache:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-security:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-thymeleaf:${springBootVersion}")
	compile("org.springframework.boot:spring-boot-starter-web:${springBootVersion}")
	compile "com.querydsl:querydsl-jpa:${querydslVersion}"
	compile "com.querydsl:querydsl-apt:${querydslVersion}:jpa"
	compile("com.zaxxer:HikariCP:${hikaricpVersion}")
	compile("org.liquibase:liquibase-core:${liquibaseVersion}")

    compile("mysql:mysql-connector-java:${mysqlVersion}")

	providedRuntime("org.springframework.boot:spring-boot-starter-tomcat:${springBootVersion}")

	testCompile("org.springframework.boot:spring-boot-starter-test:${springBootVersion}")
	testCompile("org.mockito:mockito-core:${mockitoVersion}")
}

node {
    version = "${nodeVersion}"
    npmVersion = "${npmVersion}"
    distBaseUrl = "${nodeDistinationUrl}"
    download = true
}

war {
    baseName = 'web-app-spring-template'
    version = '0.0.1-SNAPSHOT'
}

/**
 *  We don't want gradle to copy javascript resources (and css in the future), because we need only compiled javascript and webpack does copying itself.
 * */
processResources {
    exclude('assets/js/**/*.js')
    exclude('assets/css/**/*.css')
}
String buildTimestamp = getBuildTimestamp()

task bundle(type: NpmTask) {
    String profile = "dev"
    args = [
            'run',
            "bundle-${profile}",
            "--profile=${profile}",
            "--buildTimestamp=${buildTimestamp}"
    ]
}
bundle.dependsOn(processResources)
bundle.dependsOn(npm_install)

assemble.dependsOn(bundle)

bootRun.dependsOn(bundle)

bootRun {
    jvmArgs = ["-Dfile.encoding=UTF-8"]
}

bootRepackage.dependsOn(bundle)


// Task for javascript hot reloading, need to invoke manually. Can't use it in 'bundle' task because it blocks thread until stop.
task bundleWatch(type: NpmTask) {
    String profile = "dev"
    args = [
            'run',
            "bundle-dev-watch",
            "--profile=${profile}",
            "--buildTimestamp=${buildTimestamp}"
    ]
}

String getBuildTimestamp() {
    Date date = new Date()
    String formattedDate = date.format('yyyyMMddHHmmssSSS')
    println "Gradle using buildDate: $formattedDate"
    formattedDate
}